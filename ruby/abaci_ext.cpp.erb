#include "abaci_ext.h"
#include <stdio.h>
#include "abaci.h"

extern "C"
{
#include <ruby.h>
}

<%
require 'ext_gen'

# Vector2

Vector2d = ExtGen::CClass.new("Vector2d") do
  define(:initialize, "Vector2d", "initialize", "initialize", [["double", "x"], ["double", "y"]])
  define(:assign, "Vector2d", "initialize_copy", "initialize_copy", [["Vector2d", "other"]])

  define(:self_method, "void", "SetZero", "zero!", [])
  define(:method, "Vector2d", "Unit", "unit", [])
  define(:method, "double", "Len", "len", [])
  define(:method, "double", "LenSq", "len_sq", [])

  # accessors
  define(:get_attrib, "double", "x", "x", [])
  define(:set_attrib, "double", "x", "x=", [["double", "v"]])
  define(:get_attrib, "double", "y", "y", [])
  define(:set_attrib, "double", "y", "y=", [["double", "v"]])

  define(:func, "Vector2d", "Lerp", "lerp", [["Vector2d", "other"], ["double", "t"]])
  define(:func, "double", "Dot", "dot", [["Vector2d", "other"]])

  define(:unary_op, "Vector2d", "unary_minus", "-@", [], "-")
  define(:binary_op, "Vector2d", "add", "+", [["Vector2d", "other"]], "+")
  define(:binary_op, "Vector2d", "sub", "-", [["Vector2d", "other"]], "-")
  define(:binary_op, "Vector2d", "mul", "*", [["Vector2d", "other"]], "*")
  define(:binary_op, "Vector2d", "div", "/", [["Vector2d", "other"]], "/")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[128];
    sprintf(temp, "<%.5f, %.5f>", self_v.x, self_v.y);
    return rb_str_new2(temp);	
  CODE
end

# Vector3

Vector3d = ExtGen::CClass.new("Vector3d") do
  define(:initialize, "Vector3d", "initialize", "initialize", [["double", "x"], ["double", "y"], ["double", "z"]])
  define(:assign, "Vector3d", "initialize_copy", "initialize_copy", [["Vector3d", "other"]])

  define(:self_method, "void", "SetZero", "zero!", [])
  define(:method, "Vector3d", "Unit", "unit", [])
  define(:method, "double", "Len", "len", [])
  define(:method, "double", "LenSq", "len_sq", [])

  # accessors
  define(:get_attrib, "double", "x", "x", [])
  define(:set_attrib, "double", "x", "x=", [["double", "v"]])
  define(:get_attrib, "double", "y", "y", [])
  define(:set_attrib, "double", "y", "y=", [["double", "v"]])
  define(:get_attrib, "double", "z", "z", [])
  define(:set_attrib, "double", "z", "z=", [["double", "v"]])

  define(:func, "Vector3d", "Lerp", "lerp", [["Vector3d", "other"], ["double", "t"]])
  define(:func, "double", "Dot", "dot", [["Vector3d", "other"]])
  define(:func, "Vector3d", "Cross", "cross", [["Vector3d", "other"]])

  define(:unary_op, "Vector3d", "unary_minus", "-@", [], "-")
  define(:binary_op, "Vector3d", "add", "+", [["Vector3d", "other"]], "+")
  define(:binary_op, "Vector3d", "sub", "-", [["Vector3d", "other"]], "-")
  define(:binary_op, "Vector3d", "mul", "*", [["Vector3d", "other"]], "*")
  define(:binary_op, "Vector3d", "div", "/", [["Vector3d", "other"]], "/")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[128];
    sprintf(temp, "<%.5f, %.5f, %.5f>", self_v.x, self_v.y, self_v.z);
    return rb_str_new2(temp);	
  CODE
end

# Vector4

Vector4d = ExtGen::CClass.new("Vector4d") do
  define(:initialize, "Vector4d", "initialize", "initialize", [["double", "x"], ["double", "y"], ["double", "z"], ["double", "w"]])
  define(:assign, "Vector4d", "initialize_copy", "initialize_copy", [["Vector4d", "other"]])

  define(:self_method, "void", "SetZero", "zero!", [])
  define(:method, "Vector4d", "Unit", "unit", [])
  define(:method, "double", "Len", "len", [])
  define(:method, "double", "LenSq", "len_sq", [])

  # accessors
  define(:get_attrib, "double", "x", "x", [])
  define(:set_attrib, "double", "x", "x=", [["double", "v"]])
  define(:get_attrib, "double", "y", "y", [])
  define(:set_attrib, "double", "y", "y=", [["double", "v"]])
  define(:get_attrib, "double", "z", "z", [])
  define(:set_attrib, "double", "z", "z=", [["double", "v"]])
  define(:get_attrib, "double", "w", "w", [])
  define(:set_attrib, "double", "w", "w=", [["double", "v"]])

  define(:func, "Vector4d", "Lerp", "lerp", [["Vector4d", "other"], ["double", "t"]])
  define(:func, "double", "Dot", "dot", [["Vector4d", "other"]])

  define(:unary_op, "Vector4d", "unary_minus", "-@", [], "-")
  define(:binary_op, "Vector4d", "add", "+", [["Vector4d", "other"]], "+")
  define(:binary_op, "Vector4d", "sub", "-", [["Vector4d", "other"]], "-")
  define(:binary_op, "Vector4d", "mul", "*", [["Vector4d", "other"]], "*")
  define(:binary_op, "Vector4d", "div", "/", [["Vector4d", "other"]], "/")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[256];
    sprintf(temp, "<%.5f, %.5f, %.5f, %.5f>", self_v.x, self_v.y, self_v.z, self_v.w);
    return rb_str_new2(temp);	
  CODE
end

# Quat

Quatd = ExtGen::CClass.new("Quatd") do
  define(:initialize, "Quatd", "initialize", "initialize", [["double", "i"], ["double", "j"], ["double", "k"], ["double", "r"]])
  define(:assign, "Quatd", "initialize_copy", "initialize_copy", [["Quatd", "other"]])

  define(:self_method, "void", "SetZero", "zero!", [])
  define(:method, "Quatd", "Unit", "unit", [])
  define(:method, "double", "Len", "len", [])
  define(:method, "double", "LenSq", "len_sq", [])

  # accessors
  define(:get_attrib, "double", "i", "i", [])
  define(:set_attrib, "double", "i", "i=", [["double", "v"]])
  define(:get_attrib, "double", "j", "j", [])
  define(:set_attrib, "double", "j", "j=", [["double", "v"]])
  define(:get_attrib, "double", "k", "k", [])
  define(:set_attrib, "double", "k", "k=", [["double", "v"]])
  define(:get_attrib, "double", "r", "r", [])
  define(:set_attrib, "double", "r", "r=", [["double", "v"]])

  define(:func, "double", "Dot", "dot", [["Quatd", "other"]])

  define(:unary_op, "Quatd", "unary_minus", "-@", [], "-")
  define(:binary_op, "Quatd", "add", "+", [["Quatd", "other"]], "+")
  define(:binary_op, "Quatd", "sub", "-", [["Quatd", "other"]], "-")
  define(:binary_op, "Quatd", "mul", "*", [["Quatd", "other"]], "*")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[256];
    sprintf(temp, "<%.5f, %.5f, %.5f, %.5f>", self_v.i, self_v.j, self_v.k, self_v.r);
    return rb_str_new2(temp);	
  CODE
end

# Complex

Complexd = ExtGen::CClass.new("Complexd") do
  define(:initialize, "Complexd", "initialize", "initialize", [["double", "r"], ["double", "i"]])
  define(:assign, "Complexd", "initialize_copy", "initialize_copy", [["Complexd", "other"]])

  define(:method, "double", "Len", "len", [])
  define(:method, "double", "LenSq", "len_sq", [])

  # accessors
  define(:get_attrib, "double", "r", "r", [])
  define(:set_attrib, "double", "r", "r=", [["double", "v"]])
  define(:get_attrib, "double", "i", "i", [])
  define(:set_attrib, "double", "i", "i=", [["double", "v"]])

  define(:func, "double", "Dot", "dot", [["Complexd", "other"]])

  define(:unary_op, "Complexd", "unary_minus", "-@", [], "-")
  define(:unary_op, "Complexd", "unary_conj", "~@", [], "~")
  define(:binary_op, "Complexd", "add", "+", [["Complexd", "other"]], "+")
  define(:binary_op, "Complexd", "sub", "-", [["Complexd", "other"]], "-")
  define(:binary_op, "Complexd", "mul", "*", [["Complexd", "other"]], "*")
  define(:binary_op, "Complexd", "div", "/", [["Complexd", "other"]], "*")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[256];
    sprintf(temp, "<%.5f + %.5fi>", self_v.r, self_v.i);
    return rb_str_new2(temp);	
  CODE
end

%>
<%= Vector2d.gen_functions %>
<%= Vector3d.gen_functions %>
<%= Vector4d.gen_functions %>
<%= Quatd.gen_functions %>
<%= Complexd.gen_functions %>

void init_abaci()
{
<%= Vector2d.gen_defs %>
<%= Vector3d.gen_defs %>
<%= Vector4d.gen_defs %>
<%= Quatd.gen_defs %>
<%= Complexd.gen_defs %>

	printf("Abaci Ruby Extension Active!\n");
}
