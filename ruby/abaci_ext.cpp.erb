#include "abaci_ext.h"
#include <stdio.h>
#include "abaci.h"

extern "C"
{
#include <ruby.h>
}

#ifndef RFLOAT_VALUE
#define RFLOAT_VALUE(x) RFLOAT((x))->value
#endif

VALUE mAbaci;

<%
require 'ext_gen'

# Vector2

Vector2d = ExtGen::CClass.new("Vector2d", "mAbaci") do
  define(:initialize, "Vector2d", "initialize", "initialize", [["double", "x"], ["double", "y"]])
  define(:assign, "Vector2d", "initialize_copy", "initialize_copy", [["Vector2d", "other"]])

  define(:self_method, "void", "SetZero", "zero!", [])
  define(:method, "Vector2d", "Unit", "unit", [])
  define(:method, "double", "Len", "len", [])
  define(:method, "double", "LenSq", "len_sq", [])

  # accessors
  define(:get_attrib, "double", "x", "x", [])
  define(:set_attrib, "double", "x", "x=", [["double", "v"]])
  define(:get_attrib, "double", "y", "y", [])
  define(:set_attrib, "double", "y", "y=", [["double", "v"]])

  define(:func, "Vector2d", "Lerp", "lerp", [["Vector2d", "other"], ["double", "t"]])
  define(:func, "double", "Dot", "dot", [["Vector2d", "other"]])

  define(:unary_op, "Vector2d", "unary_minus", "-@", [], "-")
  define(:binary_op, "Vector2d", "add", "+", [["Vector2d", "other"]], "+")
  define(:binary_op, "Vector2d", "sub", "-", [["Vector2d", "other"]], "-")
  define(:binary_op, "Vector2d", "mul", "*", [["Vector2d", "other"]], "*")
  define(:binary_op, "Vector2d", "div", "/", [["Vector2d", "other"]], "/")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[128];
    sprintf(temp, "<%.5f, %.5f>", self_v.x, self_v.y);
    return rb_str_new2(temp);	
  CODE
end

# Vector3

Vector3d = ExtGen::CClass.new("Vector3d", "mAbaci") do
  define(:initialize, "Vector3d", "initialize", "initialize", [["double", "x"], ["double", "y"], ["double", "z"]])
  define(:assign, "Vector3d", "initialize_copy", "initialize_copy", [["Vector3d", "other"]])

  define(:self_method, "void", "SetZero", "zero!", [])
  define(:method, "Vector3d", "Unit", "unit", [])
  define(:method, "double", "Len", "len", [])
  define(:method, "double", "LenSq", "len_sq", [])

  # accessors
  define(:get_attrib, "double", "x", "x", [])
  define(:set_attrib, "double", "x", "x=", [["double", "v"]])
  define(:get_attrib, "double", "y", "y", [])
  define(:set_attrib, "double", "y", "y=", [["double", "v"]])
  define(:get_attrib, "double", "z", "z", [])
  define(:set_attrib, "double", "z", "z=", [["double", "v"]])

  define(:func, "Vector3d", "Lerp", "lerp", [["Vector3d", "other"], ["double", "t"]])
  define(:func, "double", "Dot", "dot", [["Vector3d", "other"]])
  define(:func, "Vector3d", "Cross", "cross", [["Vector3d", "other"]])

  define(:unary_op, "Vector3d", "unary_minus", "-@", [], "-")
  define(:binary_op, "Vector3d", "add", "+", [["Vector3d", "other"]], "+")
  define(:binary_op, "Vector3d", "sub", "-", [["Vector3d", "other"]], "-")
  define(:binary_op, "Vector3d", "mul", "*", [["Vector3d", "other"]], "*")
  define(:binary_op, "Vector3d", "div", "/", [["Vector3d", "other"]], "/")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[128];
    sprintf(temp, "<%.5f, %.5f, %.5f>", self_v.x, self_v.y, self_v.z);
    return rb_str_new2(temp);	
  CODE
end

# Vector4

Vector4d = ExtGen::CClass.new("Vector4d", "mAbaci") do
  define(:initialize, "Vector4d", "initialize", "initialize", [["double", "x"], ["double", "y"], ["double", "z"], ["double", "w"]])
  define(:assign, "Vector4d", "initialize_copy", "initialize_copy", [["Vector4d", "other"]])

  define(:self_method, "void", "SetZero", "zero!", [])
  define(:method, "Vector4d", "Unit", "unit", [])
  define(:method, "double", "Len", "len", [])
  define(:method, "double", "LenSq", "len_sq", [])

  # accessors
  define(:get_attrib, "double", "x", "x", [])
  define(:set_attrib, "double", "x", "x=", [["double", "v"]])
  define(:get_attrib, "double", "y", "y", [])
  define(:set_attrib, "double", "y", "y=", [["double", "v"]])
  define(:get_attrib, "double", "z", "z", [])
  define(:set_attrib, "double", "z", "z=", [["double", "v"]])
  define(:get_attrib, "double", "w", "w", [])
  define(:set_attrib, "double", "w", "w=", [["double", "v"]])

  define(:func, "Vector4d", "Lerp", "lerp", [["Vector4d", "other"], ["double", "t"]])
  define(:func, "double", "Dot", "dot", [["Vector4d", "other"]])

  define(:unary_op, "Vector4d", "unary_minus", "-@", [], "-")
  define(:binary_op, "Vector4d", "add", "+", [["Vector4d", "other"]], "+")
  define(:binary_op, "Vector4d", "sub", "-", [["Vector4d", "other"]], "-")
  define(:binary_op, "Vector4d", "mul", "*", [["Vector4d", "other"]], "*")
  define(:binary_op, "Vector4d", "div", "/", [["Vector4d", "other"]], "/")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[256];
    sprintf(temp, "<%.5f, %.5f, %.5f, %.5f>", self_v.x, self_v.y, self_v.z, self_v.w);
    return rb_str_new2(temp);	
  CODE
end

# Quat

Quatd = ExtGen::CClass.new("Quatd", "mAbaci") do
  define(:class_method, "Quatd", "AxisAngle", "axis_angle", [["Vector3d", "axis"], ["double", "angle"]])

  define(:initialize, "Quatd", "initialize", "initialize", [["double", "i"], ["double", "j"], ["double", "k"], ["double", "r"]])
  define(:assign, "Quatd", "initialize_copy", "initialize_copy", [["Quatd", "other"]])

  define(:self_method, "void", "SetZero", "zero!", [])
  define(:method, "Quatd", "Unit", "unit", [])
  define(:method, "double", "Len", "len", [])
  define(:method, "double", "LenSq", "len_sq", [])

  # accessors
  define(:get_attrib, "double", "i", "i", [])
  define(:set_attrib, "double", "i", "i=", [["double", "v"]])
  define(:get_attrib, "double", "j", "j", [])
  define(:set_attrib, "double", "j", "j=", [["double", "v"]])
  define(:get_attrib, "double", "k", "k", [])
  define(:set_attrib, "double", "k", "k=", [["double", "v"]])
  define(:get_attrib, "double", "r", "r", [])
  define(:set_attrib, "double", "r", "r=", [["double", "v"]])

  define(:func, "double", "Dot", "dot", [["Quatd", "other"]])

  define(:unary_op, "Quatd", "unary_minus", "-@", [], "-")
  define(:binary_op, "Quatd", "add", "+", [["Quatd", "other"]], "+")
  define(:binary_op, "Quatd", "sub", "-", [["Quatd", "other"]], "-")
  define(:binary_op, "Quatd", "mul", "*", [["Quatd", "other"]], "*")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[256];
    sprintf(temp, "<%.5f, %.5f, %.5f, %.5f>", self_v.i, self_v.j, self_v.k, self_v.r);
    return rb_str_new2(temp);	
  CODE
end

# Complex

Complexd = ExtGen::CClass.new("Complexd", "mAbaci") do
  define(:initialize, "Complexd", "initialize", "initialize", [["double", "r"], ["double", "i"]])
  define(:assign, "Complexd", "initialize_copy", "initialize_copy", [["Complexd", "other"]])

  define(:method, "double", "Len", "len", [])
  define(:method, "double", "LenSq", "len_sq", [])

  # accessors
  define(:get_attrib, "double", "r", "r", [])
  define(:set_attrib, "double", "r", "r=", [["double", "v"]])
  define(:get_attrib, "double", "i", "i", [])
  define(:set_attrib, "double", "i", "i=", [["double", "v"]])

  define(:func, "double", "Dot", "dot", [["Complexd", "other"]])

  define(:unary_op, "Complexd", "unary_minus", "-@", [], "-")
  define(:unary_op, "Complexd", "unary_conj", "~@", [], "~")
  define(:binary_op, "Complexd", "add", "+", [["Complexd", "other"]], "+")
  define(:binary_op, "Complexd", "sub", "-", [["Complexd", "other"]], "-")
  define(:binary_op, "Complexd", "mul", "*", [["Complexd", "other"]], "*")
  define(:binary_op, "Complexd", "div", "/", [["Complexd", "other"]], "*")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[256];
    sprintf(temp, "<%.5f + %.5fi>", self_v.r, self_v.i);
    return rb_str_new2(temp);	
  CODE
end

# Matrix

Matrixd = ExtGen::CClass.new("Matrixd", "mAbaci") do

  define(:class_method, "Matrixd", "Axes", "axes", [["Vector3d", "x"], ["Vector3d", "y"], ["Vector3d", "z"], ["Vector3d", "t"]])
  define(:class_method, "Matrixd", "Rows", "rows", [["Vector4d", "row0"], ["Vector4d", "row1"], ["Vector4d", "row2"], ["Vector4d", "row3"]])
  define(:class_method, "Matrixd", "QuatTrans", "quat_trans", [["Quatd", "q"], ["Vector3d", "trans"]])
  define(:class_method, "Matrixd", "ScaleQuatTrans", "scale_quat_trans", [["Vector3d", "scale"], ["Quatd", "q"], ["Vector3d", "trans"]])
  define(:class_method, "Matrixd", "Identity", "identity", [])
  define(:class_method, "Matrixd", "Frustum", "frustum", [["double", "fovy"], ["double", "aspect"], ["double", "near_val"], ["double", "far_val"]])
  define(:class_method, "Matrixd", "Ortho", "ortho", [["double", "left"], ["double", "right"], ["double", "bottom"], ["double", "top"], ["double", "near_val"], ["double", "far_val"]])
  define(:class_method, "Matrixd", "LookAt", "look_at", [["Vector3d", "eye"], ["Vector3d", "target"], ["Vector3d", "up"]])

  define(:custom, "Matrixd", "initialize", "initialize", [], <<-CODE)
      self_v = Matrixd::Identity();
	  return self;
  CODE

  define(:assign, "Matrixd", "initialize_copy", "initialize_copy", [["Matrixd", "other"]])

  define(:method, "Vector3d", "GetXAxis", "xaxis", [])
  define(:method, "Vector3d", "GetYAxis", "yaxis", [])
  define(:method, "Vector3d", "GetZAxis", "zaxis", [])
  define(:method, "Vector3d", "GetTrans", "trans", [])

  define(:arg1_method, "void", "SetXAxis", "xaxis=", [["Vector3d", "v"]])
  define(:arg1_method, "void", "SetYAxis", "yaxis=", [["Vector3d", "v"]])
  define(:arg1_method, "void", "SetZAxis", "zaxis=", [["Vector3d", "v"]])
  define(:arg1_method, "void", "SetTrans", "trans=", [["Vector3d", "v"]])

  define(:arg1_method, "void", "SetScale", "scale=", [["Vector3d", "v"]])

  define(:method, "double", "Elem", "elem", [["int", "r"], ["int", "c"]])
  define(:method, "Vector4d", "GetCol", "column", [["int", "c"]])
  define(:method, "Quatd", "GetQuat", "quat", [])

  define(:method, "Vector3d", "Mul3x3", "mul3x3", [["Vector3d", "v"]])
  define(:method, "Vector3d", "Mul3x4", "mul3x4", [["Vector3d", "v"]])
  define(:method, "Vector4d", "Mul4x4", "mul4x4", [["Vector4d", "v"]])

  define(:method, "Matrixd", "Transpose", "transpose", [])
  define(:method, "Matrixd", "OrthoInverse", "ortho_inverse", [])
  define(:method, "Matrixd", "FullInverse", "full_inverse", [])

  # accessors
  # define(:get_attrib, "Vector4d", "row0", "row0", [])
  # define(:set_attrib, "Vector4d", "row0", "row0=", [["Vector4d", "v"]])
  # define(:get_attrib, "Vector4d", "row1", "row1", [])
  # define(:set_attrib, "Vector4d", "row1", "row1=", [["Vector4d", "v"]])
  # define(:get_attrib, "Vector4d", "row2", "row2", [])
  # define(:set_attrib, "Vector4d", "row2", "row2=", [["Vector4d", "v"]])
  # define(:get_attrib, "Vector4d", "row3", "row3", [])
  # define(:set_attrib, "Vector4d", "row3", "row3=", [["Vector4d", "v"]])

  define(:binary_op, "Matrixd", "add", "+", [["Matrixd", "other"]], "+")
  define(:binary_op, "Matrixd", "sub", "-", [["Matrixd", "other"]], "-")
  define(:binary_op, "Matrixd", "mul", "*", [["Matrixd", "other"]], "*")

  define(:custom, "void", "inspect", "inspect", [], <<-CODE)
    char temp[256];
    sprintf(temp, "| %10.3f %10.3f %10.3f %10.3f |\\n| %10.3f %10.3f %10.3f %10.3f |\\n| %10.3f %10.3f %10.3f %10.3f |\\n| %10.3f %10.3f %10.3f %10.3f |\\n", 
	        self_v.row0.x, self_v.row0.y, self_v.row0.z, self_v.row0.w, 
			self_v.row1.x, self_v.row1.y, self_v.row1.z, self_v.row1.w,
			self_v.row2.x, self_v.row2.y, self_v.row2.z, self_v.row2.w,
			self_v.row3.x, self_v.row3.y, self_v.row3.z, self_v.row3.w);
    return rb_str_new2(temp);
  CODE

end

%>
<%= Vector2d.gen_functions %>
<%= Vector3d.gen_functions %>
<%= Vector4d.gen_functions %>
<%= Quatd.gen_functions %>
<%= Complexd.gen_functions %>
<%= Matrixd.gen_functions %>

void init_abaci()
{
    mAbaci = rb_define_module("Abaci");
<%= Vector2d.gen_defs %>
<%= Vector3d.gen_defs %>
<%= Vector4d.gen_defs %>
<%= Quatd.gen_defs %>
<%= Complexd.gen_defs %>
<%= Matrixd.gen_defs %>

	printf("Abaci Ruby Extension Active!\n");
}
